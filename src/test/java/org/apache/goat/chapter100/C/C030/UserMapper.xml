<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="org.apache.goat.chapter100.C.C030.UserMapper">


  <!--
<insert>标签包含如下属性：
  id：命名空间中的唯一标识符，可用来代表这条语句 。
  parameterType ：即将传入的语句参数的完全限定类名或别名 。 这个属性是可边的 ，因为 MyBatis 可以推断出传入语句的具体参数，因此不建议配置该属性 。
  flushCache ：默认值为 true ，任何时候只要语句被调用，都会清空一级缓存和 二级缓存 。
  timeout ：设置在抛出异常之前，驱动程序等待数据库返回请求结果的秒数 。
  stateme 口 tType ：对于 STATEMENT 、 PREPARED 、 CALLABLE, MyBatis 会分别使用
  对应的 Statement 、 PreparedStatement 、 Callable S tatement ，默认值为 PREPARED 。
  useGeneratedKeys ：默认值为 false 。 如果设置为 true, MyBatis 会使用 JDBC 的 get Ge口eratedKeys 方法来取出由数据库内部生成的主键 。
  keyProperty : MyBatis 通过 getGeneratedKeys 获取主键值后将要赋值的属性名 。如果希望得到多个数据库自动生成的列，属性值也可以是以逗号分隔的属性名称列表 。
  keyColumn ：仅对时SERT 和 UPDATE 有用 。 通过生成的键值设置表 中的列名， 这个
  设置仅在某些数据库（如 PostgreSQL ）中是必须的， 当主键列不是表中的第一列时需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表 。
  database Id：如果配置了 databaseidProvider (4.6 节有详细配置方法 ） ， MyBatis 会加载所有的不带 databaseid 的或匹配当前 databaseid 的语句 。 如果同时存在带
  databaseid 和不带 databaseid 的语句，后者会被忽略 。
-->


  <!-- 注意： 这里的 #{createTime, jdbcType=DATE} 中的 DATE 必须大写否则报错 -->

	<insert id="insert">
		insert into sys_user(
			user_name, user_password, user_email, 
			user_info, head_img, create_time)
		values(
			#{userName}, #{userPassword}, #{userEmail}, 
			#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
	</insert>

  <insert id="insert2">
    insert into sys_user(
      user_name, user_password, user_email,
      user_info, head_img, create_time)
    values(
            #{userName}, #{userPassword}, #{userEmail},
            #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=DATE})
  </insert>


</mapper>
