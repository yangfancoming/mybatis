<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"   "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>

  <!--
  propertiesElement 方法是先解析<properties>节点的子节点内容， 然后再
  从文件系统或者网络读取属性配置，并将所有的属性及属性值都放入到 defaults 属性对象中。
  这会导致同名属性覆盖的问题，也就是从文件系统，或者网络上读取到的属性和属性值会覆盖掉<properties>子节点中同名的属性和值

  例如： 下面  <property name="jdbc.username" value="what"/> 子节点属性将会被 <properties resource="jdbc.properties">
  配置文件中的   jdbc.username=root 覆盖掉！ 即：resource 和 url 属性的优先级更高！

  -->

  <properties resource="jdbc.properties">
    <property name="jdbc.username" value="what"/>
    <property name="table" value="users"/>
    <property name="stringProperty" value="foo"/>
    <property name="integerProperty" value="10"/>
    <property name="longProperty" value="1000"/>
  </properties>



  <settings>
    <setting name="cacheEnabled" value="false"/>
    <setting name="lazyLoadingEnabled" value="true"/>
    <setting name="multipleResultSetsEnabled" value="true"/>
    <setting name="useColumnLabel" value="true"/>
    <setting name="useGeneratedKeys" value="false"/>
    <setting name="defaultExecutorType" value="BATCH"/>
    <setting name="defaultStatementTimeout" value="25"/>
  </settings>


	<typeAliases>
		<typeAlias type="org.apache.goat.chapter200.common.Foo" alias="Foo" />
	</typeAliases>

	<environments default="development">
		<environment id="development">
			<transactionManager type="JDBC">
				<property name="" value="" />
			</transactionManager>
			<dataSource type="UNPOOLED">
				<property name="driver" value="org.hsqldb.jdbcDriver" />
				<property name="url" value="jdbc:hsqldb:mem:cache" />
				<property name="username" value="sa" />
			</dataSource>
		</environment>
	</environments>

	<mappers>
		<mapper resource="org/apache/goat/chapter200/A02/Foo.xml"/>
	</mappers>


</configuration>
